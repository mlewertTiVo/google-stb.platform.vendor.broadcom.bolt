# ***************************************************************************
# Broadcom Proprietary and Confidential. (c)2016 Broadcom. All rights reserved.
#
# THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
# AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
# EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
#
# ***************************************************************************
include config/sec-zeus41.cfg

# BOLT memory layout & sections in FLASH

# Fill character
gset FILLB		0xff
gset BOLT_TEXT_ADDR	0xe0000000

# --- FSBL ---
# FSBL code occupies 0x00 - 0x40 (64b), 0x0960 - 0x9400 (34.6Kb)
# Have FSBL code occupy the first 28Kb
section -name FSBL   -off 0x00000000 -size 0x6800 #max:0x9400

# BBL image
section -name BBL    -off 0x0000F6F0 -size 0x00010910

# --- SSBL ---
# BFW, signature and key
section -name BFW    -off 0x00020000 -size 0x00021000
# AVS firmware data
section -name AVS    -off 0x00041000 -size 0x00004000
# MEMSYS
section -name MEMSYS -off 0x00006800 -size 0x00006600
# MCB data + board infos <= 0x6000
section -name SHMOO  -off 0x00048000 -size 0x00001000
section -name BOARDS -off 0x0004A000 -size 0x00002000
# GAP (reserved)
section -name GAP    -off 0x0004e000 -size auto #max:0x1000
# SSBL
section -name SSBL   -off 0x00050000 -size 0x00070000

# SSBL DDR placements
#
#              |       SSBL code       |
#  0x0700_8000 +-----------------------+ SSBL_RAM_ADDR (start of SSBL)
#              | 2nd level page tables |
#              | (guard, sram, ... )   |
#  0x0700_4000 +-----------------------+ SSBL_PAGE_TABLE + 0x4000
#              | 1st level page table  |
#  0x0700_0000 +-----------------------+ SSBL_PAGE_TABLE
#              |       board info      |
#              +-----------------------+ SSBL_PAGE_TABLE - SSBL_BOARDINFO_SIZE
#
gset SSBL_PAGE_TABLE         $DDR0_BASE+0x07000000
gset SSBL_BOARDINFO_SIZE     0x4000
gset SSBL_BOARDINFO          $SSBL_PAGE_TABLE-$SSBL_BOARDINFO_SIZE
# The 1st-level page table maps 4GB worth of virtual address space.
# Each 32-bit section entry maps a 1MB region.
# (4GB / 1MB) * 4 = 1st-level PT size
gset SSBL_PAGE_TABLE_SIZE    0x4000
gset SSBL_PAGE_TABLE_2_SIZE  0x400
gset SSBL_PAGE_TABLE_2       $SSBL_PAGE_TABLE+$SSBL_PAGE_TABLE_SIZE
gset SSBL_PAGE_TABLE_2_SRAM  $SSBL_PAGE_TABLE_2+$SSBL_PAGE_TABLE_2_SIZE
gset SSBL_RAM_ADDR           $DDR0_BASE+0x07008000

#  BOLT currently uses a 32 bit memory space
# and the 'device' (ebi & rdb) regions span
# from 0xe0000000 to 0xfff00000 within it.
#  This is a 3Gbyte (maximum) DDR memory mapping
#  (LSH by 1MB for memtop.) It does not affect
# Linux as that does its own page table mapping.
#
cset MMU_MEMTOP       0x0c00


# Setup the SRAM loadable component layout offsets:
# FSBL, memsyinitlib then shmoo 'mcb' tables.
#
#  The MCB table goes last as it utilizes memory
# beyond itself for creating a table on the fly.
gset MEMSYS_SRAM_ADDR	$SRAM_ADDR+$FSBL_SIZE


# for flash-partitions.c.in bolt(1MiB max), kernel(4MiB min)
gset BOLT_IMG_MAX 0x100000
gset KERN_IMG_MIN 0x400000

ldfile -in config/fsbl.lds.in
ldfile -in config/shmoo.lds.in
ldfile -in config/boards.lds.in
ldfile -in config/memsys.lds.in
ldfile -in config/ssbl.lds.in
ldfile -in config/bolt.lds.in
