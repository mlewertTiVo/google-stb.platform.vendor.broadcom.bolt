# ***************************************************************************
# Broadcom Proprietary and Confidential. (c)2016 Broadcom. All rights reserved.
#
# THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
# AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
# EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
#
# ***************************************************************************

# BOLT memory layout & sections in FLASH

# Fill character
gset FILLB		0xff
gset BOLT_TEXT_ADDR	0xe0000000

# FSBL code occupies 0x00 - 0x40 (64b), 0x0960 - 0x9400 (34.6Kb)
# Have FSBL code occupy the first 26Kb
section -name FSBL	-off 0x00000000 -size 0x6800 #max:0x9400
# BBL image
section -name BBL	-off 0x000096F0 -size 0x00016910
# BFW, signature and key
section -name BFW	-off 0x00020000 -size 0x00031000
# AVS firmware data
section -name AVS	-off 0x00051000 -size 0x00005000
# MEMSYS
section -name MEMSYS	-off 0x00056000 -size 0x00010000
# MCB data + boards info, total max size is 0x5000.
section -name SHMOO	-off 0x00066000 -size 0x00001000
section -name BOARDS	-off 0x00067000 -size 0x00002000
# GAP (reserved)
section -name GAP	-off 0x006b0000 -size auto
# SSBL
section -name SSBL	-off 0x0006c000 -size 0x00070000


# SSBL DDR placements
#
#              |       SSBL code       |
#  0x0700_8000 +-----------------------+ SSBL_RAM_ADDR (start of SSBL)
#              | 2nd level page tables |
#              | (guard, sram, ... )   |
#  0x0700_4000 +-----------------------+ SSBL_PAGE_TABLE + 0x4000
#              | 1st level page table  |
#  0x0700_0000 +-----------------------+ SSBL_PAGE_TABLE
#              |       board info      |
#              +-----------------------+ SSBL_PAGE_TABLE - SSBL_BOARDINFO_SIZE
#
gset SSBL_PAGE_TABLE         0x07000000
gset SSBL_BOARDINFO_SIZE     0x4000
gset SSBL_BOARDINFO          $SSBL_PAGE_TABLE-$SSBL_BOARDINFO_SIZE
# The 1st-level page table maps 4GB worth of virtual address space.
# Each 32-bit section entry maps a 1MB region.
# (4GB / 1MB) * 4 = 1st-level PT size
gset SSBL_PAGE_TABLE_SIZE    0x4000
gset SSBL_PAGE_TABLE_2_SIZE  0x400
gset SSBL_PAGE_TABLE_2       $SSBL_PAGE_TABLE+$SSBL_PAGE_TABLE_SIZE
gset SSBL_PAGE_TABLE_2_SRAM  $SSBL_PAGE_TABLE_2+$SSBL_PAGE_TABLE_2_SIZE
gset SSBL_RAM_ADDR           0x07008000

#  BOLT currently uses a 32 bit memory space
# and the 'device' (ebi & rdb) regions span
# from 0xe0000000 to 0xfff00000 within it.
#  This is a 3Gbyte (maximum) DDR memory mapping
#  (LSH by 1MB for memtop.) It does not affect
# Linux as that does its own page table mapping.
cset MMU_MEMTOP       0x0c00

# Memsys lives in the upper 64KiB SRAM
# and is 62KiB in size. The fixed
# MCBs (2 off) live after the memsys code.
gset MEMSYS_SRAM_ADDR	0xffe10000
# For 2KiB of 'fixed' MCBs @ MEMSYS offset + 61KiB.
gset MEMSYS_MCB_OFFSET	0xf400
gset MEMSYS_MCB_ADDR	$MEMSYS_SRAM_ADDR+$MEMSYS_MCB_OFFSET


gset SEC_PARAM_OFFSET	0x40
gset SEC_PARAM_START	$SRAM_ADDR+$SEC_PARAM_OFFSET
gset SEC_PARAM_LEN	0x920

# for flash-partitions.c.in (1MiB)
gset BOLT_IMG_MAX 0x100000

ldfile -in config/smm-64.lds.in
ldfile -in config/stub-64.lds.in
ldfile -in config/psci32.lds.in
ldfile -in config/fsbl-stub.lds.in -rename fsbl.lds
ldfile -in config/shmoo.lds.in
ldfile -in config/boards.lds.in
ldfile -in config/memsys-zeus421.lds.in -rename memsys.lds
ldfile -in config/ssbl.lds.in
ldfile -in config/bolt-stub.lds.in -rename bolt.lds

# Alignment is important here for this, and the following code
# in the fsbl.init section. Bits 0 & 1 must be zero (word
# aligned.)
gset STUB64_START  $SEC_PARAM_START+$SEC_PARAM_LEN
gset STUB64_OFFSET $STUB64_START-$SRAM_ADDR
gset STUB64_SIZE   0x400

# 64KiB @ 100MiB offset
gset PSCI_BASE 0x6400000
gset PSCI_SIZE 0x10000
