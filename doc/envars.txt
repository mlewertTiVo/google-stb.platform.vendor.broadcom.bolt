:toc2:
:toclevels: 3
:max-width: 100%
Environment variables.
=====================
Broadcom Ltd <support@broadcom.com>


 System start
-------------

 SYSINIT
~~~~~~~~
The *CFG_SYSINIT* string as defined in 'config/stdbuild.cfg'
(if value is not 'off') is run as a BOLT command at startup.

The default string is configured to try to load a batch file
from a USB memory stick:

----
/* autoboot a script from USB memory stick */
 config SYSINIT           "\"waitusb -t=0 -d='USB Disk' && batch usbdisk0:sysinit.txt\""
----

This is a handy feature to enable BOLT commands to be done automatically without
rebuilding BOLT but by simply changing the sysinit.txt script on a USB memory
stick e.g. via a PC text editing program.

.Example
----
# This is sysinit.txt
#
ifconfig eth0 -auto
boot 192.168.0.42:vmlinuz-initrd-7445a0
#
# pad to 2Kb
###################################
###################################
...
...
----

----
...
...
AUTOBOOT [waitusb -t=0 -d='USB Disk' && batch -loader=raw usbdisk0:sysinit.txt]
usb: new device connected to bus 1 hub 1 port 1
usb: resetting device on bus 1 hub 1 port 1
usb: found Mass-Storage Device 13fe:1a00
USBMASS: Unit 0 connected
Loader:raw Filesys:fat Dev:usbdisk0 File:sysinit.txt Options:(null)
Loading: .
 2048 bytes read
100 Mbps Full-Duplex
Device eth0:  hwaddr 00-10-18-5B-93-8A, ipaddr 192.168.0.40, mask 255.255.255.0
        gateway 192.168.0.42, nameserver not set
Loader:zimg Filesys:tftp Dev:eth0 File:192.168.0.42:vmlinuz-initrd-7445a0 Options:(null)
Reading 5272936 bytes from zImage...........
Starting program at 0x00008000 (DTB @ 0x00001000)
...
...
----

The *SYSINIT* environment variable has the effect, if set and zero,
of preventing the build time *CFG_SYSINIT* command(s) from running.

.Example
----
BOLT> setenv -p SYSINIT 0
BOLT> reboot
----

----
CPU 0123
BCM74450031
PRID74450031
v1.09
...
...
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
BOLT>
----

* Note the missing 'AUTOBOOT' line.

 User overrides
^^^^^^^^^^^^^^^
If CTRL-I is pressed when BOLT (SSBL) is starting, it will ignore
*SYSINIT* and allow 'AUTOBOOT' to once again be enabled.

If CTRL-C is pressed when BOLT (SSBL) is starting, like
the *SYSINIT* environment variable, it prevents *CFG_SYSINIT*
command(s) from running.

.Examples
----
BOLT> setenv -p SYSINIT 1
BOLT> reboot
...
...
RESET CAUSE: 0x000200 software_master (1 of 21 possible causes)
******************************************
System initialization forced via Ctrl-I
******************************************

CS0: SFDP SPI, 16MB, 64kB blocks, 256B pages
CS1: ONFI NAND, 4096MB, 2048kB blocks, 8192B page, 46B OOB, BCH-40 (1KB sector)
...
...
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
AUTOBOOT [waitusb -t=0 -d='USB Disk' && batch usbdisk0:sysinit.txt]
----

----
BOLT> unsetenv SYSINIT
BOLT> reboot
...
...
RESET CAUSE: 0x000200 software_master (1 of 21 possible causes)
******************************************
******************************************
Automatic startup canceled via Ctrl-C
******************************************

CS0: SFDP SPI, 16MB, 64kB blocks, 256B pages
CS1: ONFI NAND, 4096MB, 2048kB blocks, 8192B page, 46B OOB, BCH-40 (1KB sector)
...
...
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
----

------------------------------------------------------------------------- {qwe}

 STARTUP
~~~~~~~~
After *CFG_SYSINIT*, the environment variable 'STARTUP' is read
and run as a BOLT command.

.Example

----
BOLT> setenv -p STARTUP "show devices"
BOLT> reboot
CPU 0123
BCM74450031
PRID74450031
v1.09
...
...
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
AUTOBOOT [waitusb -t=0 -d='USB Disk' && batch usbdisk0:sysinit.txt]
USB device matching <USB Disk> not found!
Device Name          Description
-------------------  ---------------------------------------------------------
              uart0  16550 DUART at 0xf040ab00 channel 0
               mem0  Memory
        flash0.bolt  SPI flash @ CS0: 0x00000000-0x00100000 (1024KB)
      flash0.macadr  SPI flash @ CS0: 0x00100000-0x00110000 (64KB)
       flash0.nvram  SPI flash @ CS0: 0x00110000-0x00120000 (64KB)
      flash0.kernel  SPI flash @ CS0: 0x00120000-0x00520000 (4MB)
     flash0.devtree  SPI flash @ CS0: 0x00520000-0x00530000 (64KB)
      flash0.splash  SPI flash @ CS0: 0x00530000-0x005B0000 (512KB)
             flash0  SPI flash @ CS0: 0x00000000-0x01000000 (16MB)
     flash1.rootfs0  NAND flash @ CS1: 0x00000000-0x80000000 (2048MB)
     flash1.rootfs1  NAND flash @ CS1: 0x80000000-0x100000000 (2048MB)
             flash1  NAND flash @ CS1: 0x00000000-0x100000000 (4096MB)
              sata0  SATA3 AHCI Device
              sata1  SATA3 AHCI Device
               eth0  SYSTEMPORT Internal Ethernet at 0xf04a0000
              mdio0  SF2 MDIO at 0xf0b403c0
BOLT> 

----

 User overrides
^^^^^^^^^^^^^^^
If CTRL-C is pressed when BOLT (SSBL) is starting then 
'STARTUP' is bypassed and not done.

------------------------------------------------------------------------- {qwe}

 Batch command
--------------

The following environment variables apply to the 'batch' command.

 SYSINIT_TAG
~~~~~~~~~~~~
Set if the 'tag' batch command is encountered.

 BATCH_DBG
~~~~~~~~~~
If set and non-zero it enables 'batch' command debugging. 

* 0 - No debug
* 1 - General debug
* 2 - Debug output on tag match
* 3 - General and tag match


.Example
----
# This is sysinit.txt
printenv
tag TAGGY
show devices
tagsave
tag TAGGY
# pad to 2Kb
###################################
###################################
...
...
----

----
BOLT> setenv BATCH_DBG 3
*** command status = 0

BOLT>  batch  192.168.0.42:sysinit.txt
Loader:raw Filesys:tftp Dev:eth0 File:192.168.0.42:sysinit.txt Options:(null)
Loading: .
 2048 bytes read
{BATCH} <# This is sysinit.txt>
{BATCH} <printenv>
Variable Name        Value
-------------------- --------------------------------------------------
        BOOT_CONSOLE uart0
...
...
           BATCH_DBG 3
{BATCH} <tag TAGGY>
{BATCH} Registering tag <TAGGY>
{BATCH} <show devices>
Device Name          Description
-------------------  ---------------------------------------------------------
              uart0  16550 DUART at 0xf040ab00 channel 0
               mem0  Memory
        flash0.bolt  SPI flash @ CS0: 0x00000000-0x00100000 (1024KB)
      flash0.macadr  SPI flash @ CS0: 0x00100000-0x00110000 (64KB)
...
...
       tcpfastboot0  TCP Fastboot (port 1234)
        tcpconsole0  TCP Console (port 23)
{BATCH} <tagsave>
{BATCH} Saving tag...
{BATCH} <tag TAGGY>
{BATCH} Terminating batch file due to matching tags...

BOLT> printenv
Variable Name        Value
-------------------- --------------------------------------------------
        BOOT_CONSOLE uart0
...
...
         SYSINIT_TAG TAGGY
           BATCH_DBG 3
*** command status = 0
----

------------------------------------------------------------------------- {qwe}

 Splash
-------

 SPLASH
~~~~~~~
Read only. Set by BOLT to inform if the splash screen feature was
enabled in the build (*ENABLE*) or not (*DISABLE*).

 NO_SPLASH
~~~~~~~~~~
If the *NO_SPLASH* environment variable is defined (to any value) then
the splash screen will not be started.

 User overrides
^^^^^^^^^^^^^^^
If CTRL-S is pressed when BOLT (SSBL) is starting, it will not start
the splash screen.

------------------------------------------------------------------------- {qwe}

 System
-------


 BOOT_CONSOLE
~~~~~~~~~~~~~
Read only. Reports the current console device e.g. 'uart0'. Use of the BOLT
'set console' command will update this.

 BOARDNAME
~~~~~~~~~~
Read only. Reports the current board name string.

 BOARD_SERIAL
~~~~~~~~~~~~~
Reports the board serial number, set by 'setsn' BOLT command.

 CHIP_FAMILY_ID
~~~~~~~~~~~~~~~
Read only. Contains the chip ID register value, read as a hexadecimal number.

 VERSION
~~~~~~~~
Read only. The BOLT version.

 BUILDTAG
~~~~~~~~~
Read only. The BOLT build tag (git commit ID), if applicable.


 MEMORYSIZE
~~~~~~~~~~~
Read only. The total memory for the current board.

 DRAM<N>_SIZE
~~~~~~~~~~~~~
Read only. Set after executing the BOLT 'info' command. Reports
the total memory for each DDR (MEMC).

 PROMPT
~~~~~~~
The current BOLT prompt. Defaults to "BOLT> "


.Example
----
BOLT> setenv PROMPT "Smoke me a kipper> "
Smoke me a kipper> d 0x8000 4
00008000  e0bb078d                             ....
*** command status = 0
Smoke me a kipper>
----

 CMD_ECHO
~~~~~~~~~
If set, echo all commands to the console device.
Each command is then prefixed by '\{CMD}'.

.Example
----
BOLT> d -w 0xf0404000 4
f0404000  74450031                             1.Et
*** command status = 0

BOLT> setenv CMD_ECHO 1
*** command status = 0

BOLT> d -w 0xf0404000 4
{CMD} <d -w 0xf0404000 4>
f0404000  74450031                             1.Et
*** command status = 0
BOLT> 
----


------------------------------------------------------------------------- {qwe}

 Device Tree
-----------

 DT_ADDRESS
~~~~~~~~~~~
Points to the the address of the current Device Tree BOLT should reference.
You can load in another Device Tree and set DT_ADDRESS to point to it.
Note that you should run 'dt sane' to check it and make sure DT_SIZE
is updated.

.Example
----
BOLT> ifconfig eth0 -auto
Device eth0:  hwaddr 00-10-18-B5-C3-78, ipaddr 192.168.0.23, mask 255.255.255.0
        gateway not set, nameserver not set, domain localdomain
        DHCP server 192.168.0.42, DHCP server MAC 00-50-B6-4E-0B-71
*** command status = 0

BOLT> load -addr=0x10000000 -raw 192.168.0.42:master.dtb
Loader:raw Filesys:tftp Dev:eth0 File:192.168.0.42:master.dtb Options:(null)
Loading: .
 7405 bytes read
Entry address is 0x10000000
*** command status = 7405

BOLT> dt sane
DTB @ 0x7822000
DTB reported size 0xb2df @ 0x7822000
*** command status = 0

BOLT> setenv DT_ADDRESS 0x10000000
*** command status = 0

BOLT> dt sane
DTB @ 0x10000000
DTB reported size 0x1ced @ 0x10000000
----

 DT_SIZE
~~~~~~~~
The size of the current Device Tree BOLT references.

 DT_OFF
~~~~~~~
The 'dt off' and 'dt on' commands change this variable. It may also be
modified independently of those commands. If set to '1' then both the
'dt bolt' command and the silent 'dt bolt' command done just before
Linux boots is not done. 

Note the "DT_OFF: bypass device tree modification" line below:

.Example
----
BOLT> setenv DT_OFF 1
*** command status = 0

BOLT> boot 192.168.0.42:vmlinuz-initrd-7445d0
Loader:zimg Filesys:tftp Dev:eth0 File:192.168.0.42:vmlinuz-initrd-7445d0 Options:(null)
Reading 8106808 bytes from zImage...........
DT_OFF: bypass device tree modification
Closing network 'eth0'
Starting program at 0x8000 (DTB @ 0x7822000)

Uncompressing Linux... done, booting the kernel.
----


------------------------------------------------------------------------- {qwe}


 Networking
-----------

 ETH_OFF
~~~~~~~
If defined it will prevent Ethernet device initialization and function. Requires
a reboot after being enabled or disabled to take effect.

.Example
----
BOLT> setenv -p ETH_OFF 1
*** command status = 0
BOLT> reboot
...
...

...
...
BOLT> ifconfig eth0 -auto
Could not activate device eth0: Error
*** command status = -1
----

 ETH_ANEG_TIMEOUT
~~~~~~~~~~~~~~~~~
If defined, it overrides the default timeout value, 8 (eight) seconds, on
auto-negotiation. Further, if the overridden value is differet from
the default 8 seconds, informative message is printed out.

Getting a DHCP address will time out after around 8 seconds (or, any
overridden timeout value) if network cable is not plugged in. If no DHCP
replies while network connection is okay, timing out from the DHCP request
happens much later.

Auto-negotiation should complete less than 4 seconds in most cases, sometimes
even much shorter than that. But, it can be extended depending on various
reasons, including the link partner. Careful consideration is required when
reducing the timeout.

Defining 0 (zero) removes timeout, meaning endless auto-negotiation attempts.

Please note that it has not effect on USB-Ethernet dongles at the moment.
It has effect only on GENET and SYSTEMPORT based Ethernet ports.
Whether your interested Ethernet port is based on GENET or SYSTEMPORT can be
checked via the "show devices" command on the BOLT command prompt.

The following example checks whether ETH_ANEG_TIMEOUT can affect eth0, and
sets the auto-negotiation timeout to 10 (ten) seconds before sending out
DHCP request for eth0.

.Example
----
BOLT> show devices
...
BOLT> setenv ETH_ANEG_TIMEOUT 10
*** command status = 0
BOLT> ifconfig eth0 -auto
...
----

 NET_*
~~~~~~

These environment variables report the current Ethernet device
configuration status. Although writable, you should not modify
these values as it will either have no effect, or unintended effects.

* NET_DEVICE
* NET_DOMAIN
* NET_GATEWAY
* NET_IPADDR
* NET_NAMESERVER
* NET_NETMASK

.Example
----
BOLT> ifconfig eth0 -auto
Device eth0:  hwaddr 00-10-18-B5-C3-78, ipaddr 192.168.0.23, mask 255.255.255.0
        gateway not set, nameserver not set, domain localdomain
        DHCP server 192.168.0.42, DHCP server MAC 00-50-B6-4E-0B-71
*** command status = 0

BOLT> printenv
Variable Name        Value
-------------------- --------------------------------------------------
        BOOT_CONSOLE uart0
              ...
              ...
         ETH0_HWADDR 00:10:18:B5:C3:78
          NET_DEVICE eth0
          NET_DOMAIN localdomain
          NET_IPADDR 192.168.0.23
         NET_NETMASK 255.255.255.0
         NET_GATEWAY 0.0.0.0
      NET_NAMESERVER 0.0.0.0
              ...
              ...
          DT_ADDRESS 7822000
             DT_SIZE b2df
*** command status = 0
----

----
BOLT> ifconfig eth0 -off
Device eth0 has been deactivated.
*** command status = 0
BOLT> printenv
Variable Name        Value
-------------------- --------------------------------------------------
        BOOT_CONSOLE uart0
              ...
              ...
          DT_ADDRESS 7822000
             DT_SIZE b2df
*** command status = 0
----


 BOOT_*
~~~~~~~
These environment variables report the current Ethernet device
DHCP status. Although writable, you should not modify
these values as it will either have no effect, or unintended effects.

* BOOT_FILE
* BOOT_OPTIONS
* BOOT_SCRIPT
* BOOT_SERVER

The example shows the value of BOOT_FILE in BOLT, after a
Linux PC based DHCP server initialization file had been modified
and the server started to provide IP addresses to BOLT on a local
LAN:

.Example
[source, shell]
----
# http://dhcp-dns-server.sourceforge.net
BootFileName=vmlinuz-initrd-7445d0
----

----
BOLT> ifconfig eth0 -auto
Device eth0:  hwaddr 00-10-18-B5-C3-78, ipaddr 192.168.0.23, mask 255.255.255.0
        gateway not set, nameserver not set, domain localdomain
        DHCP server 192.168.0.42, DHCP server MAC 00-50-B6-4E-0B-71
*** command status = 0

BOLT> printenv
Variable Name        Value
-------------------- --------------------------------------------------
        BOOT_CONSOLE uart0
              ...
              ...
           BOOT_FILE vmlinuz-initrd-7445d0
              ...
          NET_DEVICE eth0
          NET_DOMAIN localdomain
          NET_IPADDR 192.168.0.23
         NET_NETMASK 255.255.255.0
         NET_GATEWAY 0.0.0.0
      NET_NAMESERVER 0.0.0.0
*** command status = 0
----

 NET_TFTP_BLKSIZE
~~~~~~~~~~~~~~~~~
Change the default TFTP block size. Values may be from 
512 (default) to 16384 (maximum). Note that some TFTP
servers may not support the non-default block size.

 ETH0_HWADDR
~~~~~~~~~~~~
The MAC address of the principal Ethernet device. This is set by the
'setsn' BOLT command and saved to flash in the 'flash0.macadr' partition
if the partition is invalid. It may be overridden by your own value via
the 'macprog' BOLT command.

 COAP_SSDP_ENABLE
~~~~~~~~~~~~~~~~~
If set, will enable both CoAP and SSDP.
Requires a reboot for change to take effect.

----
setenv -p COAP_SSDP_ENABLE 1
----

------------------------------------------------------------------------- {qwe}


 Misc
-----

 ZIMAGE_END
~~~~~~~~~~~
Set after loading a Linux zImage format file. It records the end of
the zImage as stored in the header of that image.

http://www.simtec.co.uk/products/SWLINUX/files/booting_article.html#d0e309

.Example
----
BOLT> load 192.168.0.42:vmlinuz-initrd-7445d0
Loader:zimg Filesys:tftp Dev:eth0 File:192.168.0.42:vmlinuz-initrd-7445d0 Options:(null)
Loading: Reading 8106808 bytes from zImage...........
 8106744 bytes read
Entry address is 0x8000
*** command status = 8106744

BOLT> printenv
Variable Name        Value
-------------------- --------------------------------------------------
        BOOT_CONSOLE uart0
              ...
              ...
          ZIMAGE_END 7c3338
*** command status = 0
----


 FAT_DBG
~~~~~~~~
Minimal FAT file system debug. Set to any value to enable it.

------------------------------------------------------------------------- {qwe}

 GENET driver
-------------

The ETH<n>_<item> environment variables (where <n> is the GENET instance)
reflect the driver configuration for each GENET device BOLT knows about.

By default the values are derived from those given to the 'enet' script
command, but they can be overridden by a user setting them and rebooting to
pick up the changes.


NOTE: Not all chips have GENET, some have other types of Ethernet device drivers.

WARNING: Its not recommended to set these environment variables by hand.


 ETH<n>_SPEED
~~~~~~~~~~~~~
The PHY speed, in Mbits per second.

 * 10
 * 100
 * 1000

 ETH<n>_PHY
~~~~~~~~~~~
The PHY type.

*         INT - (1) internal PHY
*         MII - (2) 10/100 MII (18-wire interface)
*       RGMII - (4) 14-wire RGMII interface.
* RGMII_NO_ID - (6) same as above, but disable phase shift on TXC clock

The following types only have meaning for Device Tree
and are not valid for physical devices:

*      RVMII - (3) 14-wire RGMII interface.
*  RGMII_IBS - (5) 14-wire RGMII interface.
*       MOCA - (7) MoCA

Note that the value of <_PHY> is case sensitive.

 ETH<n>_PHYADDR
~~~~~~~~~~~~~~~
The address of the PHY. Either a number or a specific
string parameter.

*   probe - probe for an EXTERNAL phy address.
* noprobe - set to 32
* <value> - set to <value>

Note that the value of <_PHYADDR> is case sensitive.

 ETH<n>_MDIO_MODE
~~~~~~~~~~~~~~~~~
The MDIO configuration.

*    0 - standard MDIO is not available e.g. connected to a BCM3383.
*    1 - (default) standard MDIO is available (ethernet PHY)
* boot - BOLT configure it only e.g. linked to an ethernet switch.

Note that this applies only to the physical device BOLT can use,
not the Device Tree entries as that will result in undefined values.

------------------------------------------------------------------------- {qwe}

 USB driver
-----------


 USBMODE
~~~~~~~~

Set the USB initialization mode. This is the runtime counterpart and
override to the "config USB_STARTMODE" build time setting in
'config/stdbuild.cfg'. The "USBMODE Values" below are the same as
those 'USB_STARTMODE' uses:

.USBMODE Values
[width="25%"]
|===============
| Disabled   | 0
| Available  | 1
| On demand  | 2
|===============

If 'USBMODE' is set then BOLT will print out the build time
'USB_STARTMODE' and the environment variable override 'USBMODE'
as BOLT boots, e.g.

----
Override USB start mode 1 -> 0
----

 Disabled
^^^^^^^^^
USB is switched fully off with no opportunity to enable it.

 Available
^^^^^^^^^^
USB is started at boot time and is on, if the chip and build
configuration support it. USB may then be de-initialized and
re-initialized, e.g.

----
BOLT> usb exit
*** command status = 0
BOLT> usb init
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
*** command status = 0
----

 On demand 
^^^^^^^^^^

This is the inverse of "Available" - USB is not started at boot
time, but may be later on, e.g.

----
BOLT> usb exit
USB has not been initialized.
*** command status = -1
BOLT> usb init
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
*** command status = 0
----

 USBDT
~~~~~~
A debug flag to dump out the Device Tree USB configuration
as BOLT starts.

NOTE: This is independent of the 'USBMODE' setting.

.Example
----
BOLT> setenv -p USBDT 1
*** command status = 0
BOLT> reboot

...
...
USB Controller 0, caps:0xf0470000 ctrl:0xf0470200 ipp:0x1 ioc:0x1 device mode:0
  Port - type: ehci, addr: 0xf0470300, enabled
  Port - type: ehci, addr: 0xf0470500, enabled
  Port - type: ohci, addr: 0xf0470400, enabled
  Port - type: ohci, addr: 0xf0470600, enabled
  Port - type: xhci, addr: 0xf0471000, enabled
USB Controller 1, caps:0xf0480000 ctrl:0xf0480200 ipp:0x1 ioc:0x1 device mode:0
  Port - type: ehci, addr: 0xf0480300, enabled
  Port - type: ehci, addr: 0xf0480500, enabled
  Port - type: ohci, addr: 0xf0480400, enabled
  Port - type: ohci, addr: 0xf0480600, enabled
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
AUTOBOOT [waitusb -t=0 -d='USB Disk' && batch usbdisk0:sysinit.txt]
USB device matching <USB Disk> not found!
BOLT> 
----


 USB_SELECT
~~~~~~~~~~~

This override bitmask allows combinations of OHCI, EHCI, XHCI and BDC
USB drivers to be selectively disabled and also removed from
Device Tree so Linux will also not be able to use them.

.USB_SELECT Bitmasks
[width="10%"]
|=========================
| USB_SELECT_MASK_OHCI | 1
| USB_SELECT_MASK_EHCI | 2
| USB_SELECT_MASK_XHCI | 4
| USB_SELECT_MASK_BDC  | 8
|=========================

.Example
----
BOLT> setenv -p USBDT 1
*** command status = 0
BOLT> reboot
...
...
USB Controller 0, caps:0xf0470000 ctrl:0xf0470200 ipp:0x1 ioc:0x1 device mode:0
  Port - type: ehci, addr: 0xf0470300, enabled
  Port - type: ehci, addr: 0xf0470500, enabled
  Port - type: ohci, addr: 0xf0470400, enabled
  Port - type: ohci, addr: 0xf0470600, enabled
  Port - type: xhci, addr: 0xf0471000, enabled
USB Controller 1, caps:0xf0480000 ctrl:0xf0480200 ipp:0x1 ioc:0x1 device mode:0
  Port - type: ehci, addr: 0xf0480300, enabled
  Port - type: ehci, addr: 0xf0480500, enabled
  Port - type: ohci, addr: 0xf0480400, enabled
  Port - type: ohci, addr: 0xf0480600, enabled
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
AUTOBOOT [waitusb -t=0 -d='USB Disk' && batch usbdisk0:sysinit.txt]
USB device matching <USB Disk> not found!
----

.Only enable OHCI
----
BOLT> setenv -p USB_SELECT 1
*** command status = 0
BOLT> reboot
...
...
USB Controller 0, caps:0xf0470000 ctrl:0xf0470200 ipp:0x1 ioc:0x1 device mode:0
  Port - type: ehci, addr: 0xf0470300, disabled
  Port - type: ehci, addr: 0xf0470500, disabled
  Port - type: ohci, addr: 0xf0470400, enabled
  Port - type: ohci, addr: 0xf0470600, enabled
  Port - type: xhci, addr: 0xf0471000, disabled
USB Controller 1, caps:0xf0480000 ctrl:0xf0480200 ipp:0x1 ioc:0x1 device mode:0
  Port - type: ehci, addr: 0xf0480300, disabled
  Port - type: ehci, addr: 0xf0480500, disabled
  Port - type: ohci, addr: 0xf0480400, enabled
  Port - type: ohci, addr: 0xf0480600, enabled
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
AUTOBOOT [waitusb -t=0 -d='USB Disk' && batch usbdisk0:sysinit.txt]
----


 USBIPP
~~~~~~~
Override the value for USB 'ipp' previously setup at build time. 
This feature is mainly for debugging USB signal polarity issues
on customer boards that have not yet been fully described by the
BOLT configuration script. Use 0 for active low, 1 for active high
and 2 to allow a board strap to control the polarity.

.Example of a build time ipp value
----
dt autogen -node usb -ipp 0 -ioc 1
----

.Example
----
BOLT> setenv -p USBIPP 1
*** command status = 0
BOLT> reboot
...
...
USB init: envar USBIPP override usb@f0470200: ipp = 1
USB init: envar USBIPP override usb-phy@f0470200: ipp = 1
USB init: envar USBIPP override usb@f0480200: ipp = 1
USB init: envar USBIPP override usb-phy@f0480200: ipp = 1
...
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
----

----
BOLT> setenv -p USBIPP 0
*** command status = 0
BOLT> reboot
...
...
USB init: envar USBIPP override usb@f0470200: ipp = 0
USB init: envar USBIPP override usb-phy@f0470200: ipp = 0
USB init: envar USBIPP override usb@f0480200: ipp = 0
USB init: envar USBIPP override usb-phy@f0480200: ipp = 0
...
USB @ 0xf0470200: IPP is active high, IOC is negative polarity
USB @ 0xf0480200: IPP is active high, IOC is negative polarity
----


 USBIOC
~~~~~~
Override the value for USB 'ioc' previously setup at build time. 
This is similar to the 'USBIPP' environment variable.

----
BOLT> setenv -p USBIOC 1
*** command status = 0
BOLT> reboot
...
...
USB init: envar USBIOC override usb@f0470200: ioc = 1
USB init: envar USBIOC override usb-phy@f0470200: ioc = 1
USB init: envar USBIOC override usb@f0480200: ioc = 1
USB init: envar USBIOC override usb-phy@f0480200: ioc = 1
...
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
----

----
BOLT> setenv -p USBIOC 0
*** command status = 0
BOLT> reboot
...
...
USB init: envar USBIOC override usb@f0470200: ioc = 0
USB init: envar USBIOC override usb-phy@f0470200: ioc = 0
USB init: envar USBIOC override usb@f0480200: ioc = 0
USB init: envar USBIOC override usb-phy@f0480200: ioc = 0
...
USB @ 0xf0470200: IPP is active low, IOC is positive polarity
USB @ 0xf0480200: IPP is active low, IOC is positive polarity
----

TIP: You know if you've got the 'ioc' polarity wrong
as BOLT will print out messages like the ones below

.Getting IOC wrong
----
USB: Bus 0 Hub 1 port 1 in overcurrent overcurrent change...
USB: Bus 1 Hub 1 port 1 in overcurrent overcurrent change...
USB: Bus 2 Hub 1 port 1 in overcurrent state... not re-enabling power
USB: Bus 3 Hub 1 port 1 in overcurrent state... not re-enabling power
USB: Bus 4 Hub 1 port 1 in overcurrent overcurrent change...
USB: Bus 5 Hub 1 port 1 in overcurrent overcurrent change...
USB: Bus 6 Hub 1 port 1 in overcurrent state... not re-enabling power
USB: Bus 7 Hub 1 port 1 in overcurrent state... not re-enabling power
----

 BOARD_SERIAL
~~~~~~~~~~~~~

Applies only to the USB BDC driver. If an external USB master
requests the STB USB serial number string, it will return
this value. If not set it will default to:

 "S/N: #######"

 USBETH
~~~~~~~
Add a single entry to the USB Ethernet device scan table so
that it can be identified.

As long as the BOLT driver supports the device, a device with
an unknown (to BOLT) VID and PID can be incorporated into
BOLT without rebuilding it.


.Scan table in ssbl/usb/usbeth.c
----
static const int ID_TBL[] = {
	...
	...
	0x0423, 0x000c, NETMATE, BELKIN_CATC, (int)&catc_if,
	...
	...
----

NOTE: The values have to be comma separated with no spaces between them.

.Example
----
BOLT> setenv -p USBETH 0x0423,0x000c,0x02,0x06
----

 USBETH_TRACE
~~~~~~~~~~~~~
Enable trace debug of the USB Ethernet driver. Set to any value to enable.

.Enable trace for a device already plugged in
----
BOLT> usb exit
BOLT> setenv USBETH_TRACE x
BOLT> usb init
BOLT> ifconfig eth1 -auto
----

NOTE: This envar has to be set before a USB Ethernet device has been
enumerated, i.e. plugged in, or the USB stack brought up (see the
'usb init' and 'usb exit' BOLT commands).

 EHCIOFF
~~~~~~~
If set to any value, disables the EHCI portion of the BOLT USB driver.

 OHCIOFF
~~~~~~~~
If set to any value, disables the OHCI portion of the BOLT USB driver.

 BDCOFF
~~~~~~~
If set to any value, disables the BDC portion of the BOLT USB driver.

 BDC_VENDEV
~~~~~~~~~~~
If BDCOFF is _not_ set and BDC_VENDEV set to any value other than
0xffffffff (-1), then during startup the USB vendor:device pair the
BDC driver responds with is changed to the value in BDC_VENDEV.

 BDC_DBG
~~~~~~~~
Enable debug of the BDC driver. The option bitmask selects what
parts of the driver are to be debugged:

|=======================================
|DBG_CMD        | 0x00000001
|DBG_BD_QUEUE   | 0x00000002
|DBG_BD_RING    | 0x00000004
|DBG_BD_STATS   | 0x00000008
|DBG_PSC1       | 0x00000010
|DBG_PSC2       | 0x00000020
|DBG_CTL_STATE  | 0x00000040
|DBG_CTL_DATA   | 0x00000080
|DBG_CTL_SETUP  | 0x00000100
|DBG_CTL_IN     | 0x00000200
|DBG_CTL_OUT    | 0x00000400
|DBG_CTL_STATUS | 0x00000800
|DBG_BULK_IN    | 0x00001000
|DBG_BULK_IN2   | 0x00002000
|DBG_BULK_OUT   | 0x00004000
|DBG_BULK_OUT2  | 0x00008000
|DBG_EVENT1     | 0x00010000
|DBG_EVENT2     | 0x00020000
|DBG_EVENT3     | 0x00040000
|DBG_EVENT4     | 0x00080000
|DBG_INIT1      | 0x00100000
|DBG_INIT2      | 0x00200000
|DBG_GEN1       | 0x01000000
|DBG_GEN2       | 0x02000000
|DBG_GEN3       | 0x04000000
|DBG_DB         | 0x08000000
|DBG_LPBK_MODE  | 0x40000000
|DBG_FUNC_TRACE | 0x80000000
|=======================================

 USBDBG
~~~~~~~
If set to any value, enable USB initialization debug ouput.

.Example
----
BOLT> usb exit
*** command status = 0
BOLT> setenv USBDBG x
*** command status = 0
BOLT> usb init
USB @ 0xf0470200: IPP is active low, IOC is negative polarity
 - OHCI controller at 0xF0470400
 - OHCI controller at 0xF0470600
USB @ 0xf0480200: IPP is active low, IOC is negative polarity
 - OHCI controller at 0xF0480400
 - OHCI controller at 0xF0480600
*** command status = 0
----

 USBSERIALTEST
~~~~~~~~~~~~~~
If set to any value and if a USB serial device is plugged in,
enables the 'test uart' command to echo characters to and from
the selected USB uart to the current BOLT console.


 USBMASS_INFO
~~~~~~~~~~~~~
If set to any value, prints USB memory stick/disk size on
opening it.


 USBMOUSETEST
~~~~~~~~~~~~~
If set to any value, prints out stats for any mouse device connected.

.Example
----
BOLT> setenv USBMOUSETEST 1
*** command status = 0
BOLT> Mouse: [  ] X:127 Y:69 Wheel:0
Mouse: [  ] X:127 Y:98 Wheel:0
Mouse: [  ] X:102 Y:27 Wheel:0
Mouse: [  ] X:9 Y:2 Wheel:0
Mouse: [  ] X:15 Y:-6 Wheel:0
Mouse: [  ] X:10 Y:-2 Wheel:0
Mouse: [  ] X:-2 Y:-4 Wheel:0
Mouse: [  ] X:-9 Y:-11 Wheel:0
Mouse: [  ] X:-10 Y:-15 Wheel:0
unsetenv  USBMOUSETEST
*** command status = 0
----

------------------------------------------------------------------------- {qwe}

 Appendix: Copyright Info
-------------------------

Copyright (C) 2017, Broadcom Ltd.
All Rights Reserved.
Confidential Property of Broadcom Ltd.
