################################################################################
# Broadcom Proprietary and Confidential. (c)2017 Broadcom. All rights reserved.
#
#  THIS SOFTWARE MAY ONLY BE USED SUBJECT TO AN EXECUTED SOFTWARE LICENSE
#  AGREEMENT  BETWEEN THE USER AND BROADCOM.  YOU HAVE NO RIGHT TO USE OR
#  EXPLOIT THIS MATERIAL EXCEPT SUBJECT TO THE TERMS OF SUCH AN AGREEMENT.
#
################################################################################

FAMILIES := $(filter-out config/family-%.cfg,$(shell ls config/family-*.cfg | \
                   sed "s/config\/family-\([a-z0-9]\+\).cfg/\1/g"))
GEN:=gen

SAVED_FAMILY := $(shell [ -e $(GEN)/.family ] && cat $(GEN)/.family || echo unknown)
SAVED_CFG := $(shell [ -e $(GEN)/.config ] && cat $(GEN)/.config || echo unknown)

FAMILY = $(firstword $(filter $(FAMILIES), $(MAKECMDGOALS)) $(SAVED_FAMILY))

ROOT			:= .# legacy
CFG			:= $(firstword $(filter %.cfg, $(SAVED_CFG) config/family-$(FAMILY).cfg))
DTC_COMMIT		:= g448faa43
ZLIB_VER		:= 1.2.8
SCRIPT_ENG		:= scripts/config.pl
SCRIPT_MODULES		:= scripts/BcmDt/Board.pm \
			   scripts/BcmDt/Devices.pm \
			   scripts/BcmDt/PcieRanges.pm \
			   scripts/BcmSdio.pm \
			   scripts/BcmUtils.pm \
			   scripts/DevTree.pm
DATE_FILE		:= $(GEN)/$(FAMILY)/build_date.c
ODIR			:= objs/$(FAMILY)
TMPDIR			:= /tmp
Q			:= $(if ${V},,@)
SOFTLOAD		:= 0
BCM_JTAG		:= 0.0.0.0
FLASH_TEMPLATE		:=config/flash-partitions.c.in # flash partitions
ALT_TOOL		:=
SAVE_TEMPS		?= -save-temps=obj
SYSCC			:=gcc
SYSCFLAGS		:= -Wall -Wextra -Werror
SYSZLIB			:=-lz

COAP_VER        := 4.1.1

# Security
BFW_LOAD		:= y
BFW_HASH_LOCK		:= n
SINGLE_BOARD		:=
SECURE_BOOT		:= n
S_UNITTEST		:= n # For internal testing ONLY should be set to n normally
S_UNITTEST_AUTOFLASH	:= n # For internal testing ONLY should be set to n normally

# Documentation
DOC_S			:=$(wildcard doc/*.txt)
DOXYFILE		:=doc/Doxyfile

# Secure boot is the presumed default build type if SINGLE_BOARD is defined,
# though it can be overridden with 'SECURE_BOOT=n' on the build commandline.
ifneq ($(SINGLE_BOARD),)
 SECURE_BOOT = y
 CFG_SINGLE_BOARD = -b $(SINGLE_BOARD)
endif

OPTIONS	:= BFW_LOAD=$(BFW_LOAD) \
		BFW_HASH_LOCK=$(BFW_HASH_LOCK) \
		SECURE_BOOT=$(SECURE_BOOT) \
		S_UNITTEST=$(S_UNITTEST) \
		S_UNITTEST_AUTOFLASH=$(S_UNITTEST_AUTOFLASH)

ifneq ($(DUMMY_SECURITY),)
OPTIONS += CFG_DUMMY_SECURITY=$(DUMMY_SECURITY)
endif

# Catch the case where the family changed
# but not the saved cfg - use the default cfg
# or whatever was on the make cmdline instead.
ifneq ($(FAMILY),$(SAVED_FAMILY))
ifeq ($(SAVED_CFG),$(CFG))
CFG := config/family-$(FAMILY).cfg
endif
endif

export FAMILY FAMILIES ZLIB_VER COAP_VER ROOT ODIR TMPDIR Q BFW_LOAD \
	BFW_HASH_LOCK SECURE_BOOT S_UNITTEST S_UNITTEST_AUTOFLASH \
	FLASH_TEMPLATE SOFTLOAD BCM_JTAG DUMMY_SECURITY \
	CFG SAVED_CFG SINGLE_BOARD SAVE_TEMPS GEN

all baseline bloatcheck: famcheck $(FAMILY)
unknown: famcheck

-include toolpath
.NOTPARALLEL:

include build/utils.mk
include build/ver.mk
include build/brcm.mk
include build/tools.mk

LDS_IN_FILES := $(wildcard config/*.lds.in)

# These are all of the files generated by $(SCRIPT_ENG)
CFG_GEN_FILES := $(addprefix $(GEN)/$(FAMILY)/, \
	aon_history.h \
	board_params.c \
	board_types.h \
	config.h \
	family \
	fsbl-i2c.h \
	fsbl-pinmux.c \
	include.mk \
	memc_arb.h \
	mmap-dram.h \
	nand_chips.h \
	otp_status.h \
	rts.c \
	board_params.h \
	dt_ops.h \
	) \
	$(DTS) \
	$(BOARD_DTS)

# These are all of the files read by $(SCRIPT_ENG)
CFG_DEPS := $(shell scripts/get_cfg_deps.pl $(CFG) 2>/dev/null)

CFG_GEN_FILES_DEPS := \
	Makefile.Bolt \
	$(CFG_DEPS) \
	$(SCRIPT_ENG) \
	$(SCRIPT_MODULES) \
	$(FLASH_TEMPLATE) \
	$(LDS_IN_FILES) \
	$(wildcard config/clks-$(FAMILY).plx)

$(CFG_GEN_FILES) $(GEN)/.family: $(CFG_GEN_FILES_DEPS) include/$(FAMILY)/*.*
	$(Q)echo "  ================================ "
	$(Q)echo "  CFG.PL  $(CFG)"
	$(Q)echo "  FAMILY  $(FAMILY)"
	$(Q)echo "  ================================"
	$(Q)$(SCRIPT_ENG) -f $(FAMILY) -c $(CFG) -r include/$(FAMILY) \
		-m include/$(FAMILY) -D $(ODIR) $(CFG_SINGLE_BOARD) -g $(GEN)
	$(Q)cp $(GEN)/$(FAMILY)/family $(GEN)/.family
	$(Q)echo -n $(CFG) > $(GEN)/.config

TOP_TARGETS = family_dirs toolcheck env $(DATE_FILE) $(CFG_GEN_FILES)

$(FAMILY): famcheck $(TOP_TARGETS)
# If the family is the same but the config changed then
# regen for the newer config.
ifneq ($(SAVED_CFG),unknown)
ifneq ($(SAVED_CFG),$(CFG))
ifeq ($(FAMILY),$(SAVED_FAMILY))
	$(Q)echo "  ++++++++++++++++++++++++++++++++ "
	$(Q)printf "  config change: $(SAVED_CFG) => $(CFG)\n"
	$(Q)echo "  ++++++++++++++++++++++++++++++++ "
	$(Q)rm -f $(CFG_GEN_FILES)
	$(Q)$(SCRIPT_ENG) -f $(FAMILY) -c $(CFG) -r include/$(FAMILY) -D $(ODIR) $(CFG_SINGLE_BOARD) -g $(GEN)
	$(Q)cp $(GEN)/$(FAMILY)/family $(GEN)/.family
	$(Q)echo -n $(CFG) > $(GEN)/.config
endif
endif
endif
	$(Q)printf "  -------------------------------- \n"
	$(Q)printf "  Building for chip family $(FAMILY)\n"
	$(Q)printf "  Config: $(CFG)\n"
	$(Q)printf "  -------------------------------- \n"
	$(Q)$(MAKE) --no-print-directory V=$(V) -f Makefile.Bolt $(MAKECMDGOALS) $(OPTIONS)

toolcheck:
	$(Q)perl scripts/checkpath.pl -cross=$(CROSS) -tool=$(ALT_TOOL)

bolts: env
	$(Q)perl scripts/make_all.pl -j4
	$(Q)mkdir -p bolts
	$(Q)rm -f bolts/*
	$(foreach f,$(FAMILIES), cp objs/$f/bolt-v*.bin  bolts/;)
	$(Q)ls -l bolts

#  --- setting up the environment ---
env: family_dirs $(GEN)/dtc/.marker $(GEN)/zlib-$(ZLIB_VER)/.marker \
		$(GEN)/libcoap-$(COAP_VER)/.marker \
		$(GEN)/scripts/mcb2c $(GEN)/scripts/splash_create_flash_file \
		$(GEN)/scripts/patcher.pl

zlib_check = $(shell scripts/check_for_zlib $(SYSCC) $(SYSZLIB) 1>&2 2> /dev/null; echo $$?)

$(GEN)/zlib-$(ZLIB_VER)/.marker: thirdparty/zlib-$(ZLIB_VER).tar.gz
	$(Q)echo "         SETUP ZLIB"
	$(Q)tar -xzf thirdparty/zlib-$(ZLIB_VER).tar.gz --directory $(GEN)
	$(Q)patch --directory $(GEN) -p0 < thirdparty/zlib-$(ZLIB_VER).patch
	$(Q)touch $@

$(GEN)/dtc/.marker: thirdparty/GPL-BSD-dtc-$(DTC_COMMIT).tgz \
 		thirdparty/libfdt_env.patch
	$(Q)echo "         SETUP DTC in $(GEN)"
	$(Q)tar -xzf $(ROOT)/thirdparty/GPL-BSD-dtc-$(DTC_COMMIT).tgz --directory $(GEN)
	$(Q)pushd $(GEN) && CROSS_COMPILE= $(MAKE) -C dtc dtc && popd
	$(Q)patch --directory $(GEN) -p0 < $(ROOT)/thirdparty/libfdt_env.patch
	$(Q)patch --directory $(GEN) -p0 < $(ROOT)/thirdparty/libfdt_coverity.patch
	$(Q)pushd $(GEN) && $(MAKE) -C dtc libfdt_clean && popd
	$(Q)touch $@

$(GEN)/libcoap-$(COAP_VER)/.marker: thirdparty/v$(COAP_VER).tar.gz \
		thirdparty/v$(COAP_VER).patch
	$(Q)echo "         SETUP COAP"
	$(Q)tar -xzf thirdparty/v$(COAP_VER).tar.gz --directory $(GEN)
	$(Q)patch --directory $(GEN) -p0 < $(ROOT)/thirdparty/v$(COAP_VER).patch
	$(Q)touch $@

$(GEN)/scripts/mcb2c: scripts/mcb2c.c
	$(Q)echo "         SETUP MCB COMPACT"
	$(Q)mkdir -p $(GEN)/scripts
	$(Q)$(SYSCC) $(SYSCFLAGS) scripts/mcb2c.c -o $(GEN)/scripts/mcb2c

$(GEN)/scripts/splash_create_flash_file: scripts/splash_create_flash_file.c
	$(Q)echo -n "         SETUP SPLASHFILE MAKER "; \
	if [ "$(zlib_check)" = "0" ]; then \
		echo "(with zlib)"; \
		SCFF_ARGS=$(SYSZLIB); \
	else \
		echo "(***WITHOUT*** zlib)"; \
		SCFF_ARGS=-DNO_ZLIB=1; \
	fi; \
	$(SYSCC) $(SYSCFLAGS) $^ $$SCFF_ARGS -o $@; \

family_dirs:
	$(Q)mkdir -p $(GEN)/$(FAMILY)
	$(Q)mkdir -p $(GEN)/scripts
	$(Q)mkdir -p $(ODIR)


$(DATE_FILE): famcheck
	$(Q)$(call pretty_print,"DATE","$(BUILDDATE)")
	$(Q)echo "const int buildyear = $(BUILDYEAR);" > $@
	$(Q)echo "const char builddate[] = \"$(BUILDDATE)\";" >> $@
	$(Q)echo "const char builduser[] = \"$(BUILDUSER)@$(BUILDHOST)\";" >> $@
	$(Q)echo "const char buildtag[] = \"$(BUILDTAG)\";" >> $@

help:
	@echo
	@echo "make <family> ..... Set config & makes bolt.bin, e.g. 'make 7445a0'"
	@echo "                    You cannot make more than one family at a time."
	@echo "                    Use 'scripts/make_all.pl' to make all families." 
	@echo "make .............. Make bolt.bin once config is set."
	@echo "make show ......... Show all available build targets."
	@echo "make boardinfo .... Show all available boards."
	@echo "make bolts ........ Make all available build targets."
	@echo "make clean ........ Remove all build objects for the current family."
	@echo "make distclean .... Return this build to its pristine state."
	@echo "make help ......... Get this help message."
	@echo "make V=1 .......... Show the actual invoked commands and arguments."
	@echo "make version ...... Show current version of this release."
	@echo "make family ....... Show family and the current config."
	@echo "make toolfind ..... Show the status of your toolchain."
	@echo "make env .......... Unpack and make just the build support code."
	@echo "make opts ......... show security build options."
	@echo "make baseline ..... Prepare for 'make bloatcheck' by creating *-old.o."
	@echo "make bloatcheck ... Generate bloat statistics against *-old.o."
	@echo "make doc .......... Generate HTML documentation"
	@echo "make doxy ......... Generate Doxygen documentation from source code"
	@echo

release:
	perl scripts/release.pl ${TMPDIR}

version: # See version.mk
	@echo "${BOLT_VER_MAJOR}.${BOLT_VER_MINOR} from ${BUILDTAG}"

family:
	@echo "${FAMILY}"
	@echo "${CFG}"

show:
	$(Q)echo $(FAMILIES)

opts:
	$(Q)echo $(OPTIONS)

doc: $(patsubst %.txt,%.html,$(DOC_S)) $(DOC_S)

emu: famcheck $(TOP_TARGETS)
	$(Q)$(MAKE) $(FAMILY) -f Makefile.Bolt emu_fsbl CFG_EMULATION=1 \
		CFG_BOARDDEFAULT=1 CFG_DUMMY_SECURITY=y \
		--no-print-directory

# Like 'emu' this is for pre-bringup and you have to specify the
# chip family as well, e.g. make fullemu FAMILY=7271b0
fullemu: famcheck $(TOP_TARGETS)
	$(Q)$(MAKE) $(FAMILY) -f Makefile.Bolt emu_bolt CFG_FULL_EMULATION=1 \
		CFG_BOARDDEFAULT=1 CFG_DUMMY_SECURITY=y \
		--no-print-directory

clean: famcheck
	$(Q)rm -fr $(ODIR)/*
	$(Q)rm -f $(GEN)/$(FAMILY)/*
	$(Q)rm -f $(CFG_GEN_FILES)
	$(Q)rm -f $(GEN)/.config

doxy:
	$(Q)rm -fr ./doxy
	$(Q)cp $(DOXYFILE) .doxyfile
	-$(Q)echo "PROJECT_NUMBER = $(BUILDTAG)" >> .doxyfile
	$(Q)doxygen .doxyfile

distclean:
	$(Q)rm -fr $(GEN)
	$(Q)rm -fr $(ODIR)
	$(Q)rm -f .bolt-package-name
	$(Q)rm -f  toolpath
	$(Q)rm -rf bolts objs
	$(Q)rm -f doc/*.html
	$(Q)rm -f ./.doxyfile
	$(Q)rm -fr ./doxy

toolfind:
	$(Q)perl scripts/checkpath.pl -a -cross=$(CROSS) -tool=$(ALT_TOOL)

.PHONY: help famcheck family toolcheck config config emu family_dirs
.PHONY: fullemu split clean $(FAMILIES) show
.PHONY: release version toolfind bolts
.PHONY: bloatcheck baseline doxy
